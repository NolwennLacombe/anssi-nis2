// Generated by CodiumAI

import { AbstractHttpAdapter } from "@nestjs/core";
import { ServeStaticModuleOptions } from "@nestjs/serve-static";
import { ChargeurExpressBasicAuth } from "../serveur-statique-configurable/chargeur-express-basic.auth";
import { createMock } from "@golevelup/ts-jest";

describe(ChargeurExpressBasicAuth, () => {
  // Registers basic authentication middleware
  const configurationParDefaut = {
    utilisateur: "username",
    motDePasse: "password",
  };
  it("devrait charger le middleware quand un login et un mot de passe sont passés en paramètre", () => {
    const httpAdapter = createMock<AbstractHttpAdapter>();

    const optionsArr: ServeStaticModuleOptions[] = [];
    const app = createMock<AbstractHttpAdapter>();

    httpAdapter.getInstance.mockReturnValue(app);
    const basicAuth = jest.fn();
    const chargeurAuthentificationBasiqueHTTP = jest
      .fn()
      .mockReturnValue(basicAuth);

    jest.doMock("express-basic-auth", chargeurAuthentificationBasiqueHTTP);
    const expressBasicAuthLoader = new ChargeurExpressBasicAuth(
      configurationParDefaut,
    );

    expressBasicAuthLoader.register(httpAdapter, optionsArr);

    expect(chargeurAuthentificationBasiqueHTTP).toHaveBeenCalled();
    expect(basicAuth).toHaveBeenCalledWith({
      users: {
        username: "password",
      },
      challenge: true,
    });
    expect(app.use).toHaveBeenCalledWith("/", undefined, expect.any(Function));
  });

  it("should return without errors", () => {
    const httpAdapter = createMock<AbstractHttpAdapter>();
    const optionsArr: ServeStaticModuleOptions[] = [];

    const expressBasicAuthLoader = new ChargeurExpressBasicAuth(
      configurationParDefaut,
    );

    expect(() =>
      expressBasicAuthLoader.register(httpAdapter, optionsArr),
    ).not.toThrow();
  });
});
